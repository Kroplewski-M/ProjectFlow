@model ProjectFlow.Models.View_Models.WorkspaceViewModel
@{
    ViewData["Title"] = @Model.Workspace.Name;
}

<div class="container overflow-md-hidden overflow-scroll" id="workspaceBg">
    <div class="row">
        <div class="col-6">
            <h1 class="fw-semibold bg-primary rounded ps-1">Workspace - @Model.Workspace.Name</h1>
        </div>
        <div class="col-6 d-flex justify-content-end">
            <button class="btn btn-primary me-2" onclick="toggleSettings()"><i class="bi bi-gear-fill"></i></button>
        </div>
    </div>
    <div class="d-flex workspaceContainer">
        <div class="TaskContainer p-2">
            <h3 class="fw-bold">To Do:</h3>
            <div class=" ">
                <input class="form-control" placeholder="Add to do item" onkeypress="checkEnter(event, '1')" id="1" />
                <span class="text-danger fw-semibold workspaceValidation"></span>
            </div>
            <div class="d-flex flex-column mt-3">
                @foreach (var task in @Model.Tasks.Where(t=> t.TaskStatusId == 1))
                {
                    <div class="bg-light rounded mt-2 ps-2 pt-2 d-flex justify-content-between">
                        <p class="fw-semibold">@task.Title</p>
                        <div class="d-flex">
                            <div onclick="deleteTask(@task.Id)">
                                <i class="bi bi-x-circle-fill text-secondary me-2" style="cursor:pointer"></i>
                            </div>
                            <div onclick="moveTask(@task.Id, @task.TaskStatusId, 'right')">
                                <i class="bi bi-arrow-right-circle-fill me-2" style="cursor:pointer"></i>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="TaskContainer p-2">
            <h3 class="fw-bold">Doing:</h3>
            <div class="">
                <input class="form-control" placeholder="Add doing item" onkeypress="checkEnter(event, '2')" id="2" />
                <span class="text-danger fw-semibold workspaceValidation"></span>
            </div>
            <div class="d-flex flex-column mt-3">
                @foreach (var task in @Model.Tasks.Where(t => t.TaskStatusId == 2).OrderByDescending(w => w.CreatedDate))
                {
                    <div class="bg-light rounded mt-2 ps-2 pt-2 d-flex justify-content-between">
                        <p class="fw-semibold">@task.Title</p>
                        <div class="d-flex">
                            <div onclick="moveTask(@task.Id, @task.TaskStatusId, 'left')">
                                <i class="bi bi-arrow-left-circle-fill me-2" style="cursor:pointer"></i>
                            </div>
                            <div onclick="deleteTask(@task.Id)">
                                <i class="bi bi-x-circle-fill text-secondary me-2" style="cursor:pointer"></i>
                            </div>
                            <div onclick="moveTask(@task.Id, @task.TaskStatusId, 'right')">
                                <i class="bi bi-arrow-right-circle-fill me-2" style="cursor:pointer"></i>
                            </div>
                        </div>
                    </div>
                }
            </div> 
        </div>
        <div class="TaskContainer p-2">
            <h3 class="fw-bold">Done:</h3>
            <div class="">
                <input class="form-control" placeholder="Add done item" onkeypress="checkEnter(event, '3')" id="3" />
                <span class="text-danger fw-semibold workspaceValidation"></span>
            </div>
            <div class="d-flex flex-column mt-3">
                @foreach (var task in @Model.Tasks.Where(t=> t.TaskStatusId == 3))
                {
                    <div class="bg-dark-subtle rounded mt-2 ps-2 pt-2 d-flex justify-content-between">
                        <p class="fw-semibold">@task.Title</p>
                        <div class="d-flex">
                            <div onclick="moveTask(@task.Id, @task.TaskStatusId, 'left')">
                                <i class="bi bi-arrow-left-circle-fill me-2" style="cursor:pointer"></i>
                            </div>
                            <div onclick="deleteTask(@task.Id)">
                                <i class="bi bi-x-circle-fill text-secondary me-2" style="cursor:pointer"></i>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="workspaceSettingsContainer" style="display:none;">
    <div class="workspaceSettings bg-primary">
        <div onclick="toggleSettings()" class="ms-2 mt-2">
            <button class="btn btn-secondary">Close</button>
        </div>
        <h3 class="text-center fw-semibold pt-2">Settings</h3>
        <div class="row">
            <div class="col-10 mx-auto">
                <form method="POST" id="updateWorkspaceForm">
                    @Html.AntiForgeryToken()
                    <input type="" asp-for="EditWorkspace.Id" hidden/>
                    <div>
                        <label class="form-label text-light fw-semibold">Project Name</label>
                        <input type="text" asp-for="EditWorkspace.Name" class="form-control fw-semibold text-dark"/>
                    </div>
                    <div>
                        <label class="form-label text-light fw-semibold mt-2">Project Background</label>
                        <input type="color" class="form-control" placeholder="Color" asp-for="EditWorkspace.Color" style="cursor:pointer"/>
                    </div>
                    <div class="mt-4">
                        <button class="btn btn-dark" type="button" onclick="updateWorkspace()">Update</button>
                    </div>
                </form>
                <button class="btn btn-secondary mt-2" onclick="deleteWorkspace(@Model.Workspace.Id)">Delete Project</button>

            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        $(function () {
            $('body').css("background-color", "@Model.Workspace.backgroundColor");
        })


        function toggleSettings() {
            $('.workspaceSettingsContainer').toggle();
        }
        function deleteWorkspace(workspaceId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Workspace/DeleteWorkspace/' + workspaceId,
                        type: 'DELETE',
                        success: function (data) {
                            Swal.fire(
                                'Deleted!',
                                'Your workspace has been deleted.',
                                'success'
                            ).then(function () {
                                window.location.href = '/Dashboard';
                            });
                        }
                    });
                }
            });
        }
        function updateWorkspace() {
            var formData = $('#updateWorkspaceForm').serialize();

            $.ajax({
                url: '/Workspace/UpdateWorkspace',
                type: 'POST',
                data: formData,
                success: function (data) {
                    if (data.success) {
                        location.reload();
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                },
                error: function () {
                    Swal.fire('Error!', 'An error occurred while updating the workspace.', 'error');
                }
            });
        }
        function checkEnter(event, taskStatus) {
            if (event.keyCode === 13) {
                addTask(taskStatus);
            }
        }

        function addTask(taskStatus) {
            var input = $("#" + taskStatus).val();
            var taskStatusId = parseInt(taskStatus);
            $.ajax({
                url: '/Workspace/AddTaskToWorkspace',
                type: 'POST',
                data: {
                    workspaceId: @Model.Workspace.Id,
                    taskStatusId: taskStatusId,
                    taskValue: input,
                },
                success: function (data) {
                    location.reload();
                },
                error: function () {
                    location.reload();

                }
            });
        }
        function deleteTask(taskId) {
            $.ajax({
                url: '/Workspace/DeleteTask/' + taskId,
                type: 'DELETE',
                success: function (data) {
                    location.reload();
                }
            });
        }
        function moveTask(taskId,taskStatus,taskDirection){

            var newTaskStatus = 1;
            if(taskDirection == 'right'){
                newTaskStatus = taskStatus + 1;
            }
            else{
                newTaskStatus = taskStatus - 1;
            }
            $.ajax({
                url: '/Workspace/MoveTask', 
                type: 'POST',
                data: {
                    taskId: taskId,
                    taskStatus: newTaskStatus,
                },
                success: function (data) {
                    location.reload();
                },
                error: function () {
                    location.reload();
                }
            });
        }
    </script>

}
